function mmachine_sshalive {
  local host="${1}"
  local pid

  local mhost="hopf21"
  local stime="5s"

  ssh -c arcfour -o BatchMode=yes -o StrictHostKeyChecking=no "${host}" "ping -q -c 1 ${mhost} > /dev/null" &
  pid=$!

  sleep "${stime}" && kill -s 0 $pid 2> /dev/null

  if [ $? -eq 0 ]; then
    echo "error: host \"${host}\" is not responding" >> mmachine.host-status
    kill -9 $pid
    return 1
  fi
}

function mmachine_hostlist {
  # only consider these hosts
  #local names="^xdf\|^hopf\|^fox\|^lie\|^ada"
  local names="^hopf\|^fox\|^lie"
  local mhost="hopf21"

  local list

  # Query DNS and only selects hosts which are alive:
  list=$(host -l math.uni-bielefeld.de | \
    grep -v "IPv6 address" | \
    grep -v "${mhost}" | \
    grep "${names}" | \
    cut -d'.' -f1 | \
    fping -r1 -a 2> /dev/null)

  # Sometimes a host responds to a ping, but then hangs when
  # executing commands over ssh. Filter these hosts:
  echo "${list}" | while read host; do
    mmachine_sshalive "${host}" &> /dev/null
    if [ $? -eq 0 ]; then
      echo "${host}"
    fi
  done
}

function mmachine_exec {
  local host="${1}"
  local cmd="${2}"

  echo "executing \"${cmd}\" on \"${host}\""
  ssh -q -c arcfour -n -x -o BatchMode=yes -o StrictHostKeyChecking=no "${host}" "${cmd}"
}

function mmachine_copy {
  local host="${1}"
  local file="${2}"

  echo "copying \"${file}\" to \"${host}\""
  scp -q -c arcfour -o BatchMode=yes -o StrictHostKeyChecking=no "${file}" "${host}:/var/tmp/" 
}

function mmachine_fetchdata {
  local patchdata="/vol/tmp/tjakobi/mmachine/patch.bin.xz"
  local dstfile="/var/tmp/tjakobi/mmachine/patch.bin"

  # trigger mounting of NFS share
  ls -l /vol/tmp/tjakobi/ &> /dev/null

  if [ ! -f "${patchdata}" ]; then
    echo "error: compressed patch data not found in /vol/tmp"
    return 1
  fi

  xz -d -c "${patchdata}" > "${dstfile}"

  if [ $? -ne 0 ] ; then
    echo "error: decompressing patch data failed"
    return $?
  fi
}

# Tear down mulitmachine environment on all hosts.
# This removes the working directory and all temporary files.
function mmachine_teardown {
  # remove these files and directories
  local rfiles="/var/tmp/tjakobi/mmachine /tmp/mmachine.out /tmp/mmachine.err"

  mmachine_hostlist | while read host; do
    ssh -c arcfour -o BatchMode=yes -o StrictHostKeyChecking=no "${host}" "pkill -u tjakobi"
    ssh -c arcfour -o BatchMode=yes -o StrictHostKeyChecking=no "${host}" "rm -rf ${rfiles}"
  done
}

# Prepare patch data, so that slave hosts can fetch it through /vol/tmp
function mmachine_prepare {
  local patchdata="/vol/tmp/tjakobi/mmachine/patch.bin.xz"
  local srcfile="patch.bin"

  if [ ! -f "${srcfile}" ]; then
    echo "error: patch source file not found"
    return 1
  fi

  xz -z -8 -c "${srcfile}" > "${patchdata}"

  if [ $? -ne 0 ] ; then
    echo "error: compressing patch data failed"
    return $?
  fi
}

function mmachine_status {
  local rdir="/vol/tmp/tjakobi/mmachine"
  local origins

  if [ ! -f "${1}" ]; then
    return 0
  fi

  origins=$(cat "${1}" | grep "origins:" | cut -d':' -f2 | sed 's/},{/ /g' | sed 's/{{//g' | sed 's/}}//g')

  for arg in $origins; do
    if [ ! -f "${rdir}/result_$arg.tar.xz" ]; then
      echo -n " ${arg}"
    fi
  done
}

function mmachine_bootstrap {
  local workdir="/var/tmp/tjakobi/mmachine"

  local host="${1}"
  local radius=$2
  local data=($3)
  local extdata

  local nd=${#data[*]}
  local hprefix=$(echo "${host}" | grep -o "[[:alpha:]]*")
  local idx=0

  echo "starting jobs on $host"

  # prepare origin data
  extdata="local origins=("
  while [ $idx -lt $nd ]; do
    extdata="${extdata}${data[$idx]} "
    ((idx++))
  done
  extdata="${extdata%?})"

  echo "${extdata}" > "data.bin"
  echo "local radius=$radius" >> "data.bin"

  tar -c --file - parallel mmachine_scripts "cyclotomic_radial_${hprefix}" data.bin work.sh | xz -z -7 -c > "data-${host}.tar.xz"

  if [ $? -ne 0 ] ; then
    echo "error: compressing origin data failed"
    return 1
  else
    rm -f data.bin
  fi

  mmachine_copy "${host}" "data-${host}.tar.xz"

  if [ $? -ne 0 ] ; then
    echo "error: copying origin data (via ssh) failed"
    return 2
  else
    rm -f "data-${host}.tar.xz"
  fi

  mmachine_exec "${host}" "mkdir -p ${workdir}; cd ${workdir}; mv ../../data-${host}.tar.xz .; xz -d -c data-${host}.tar.xz | tar -x --file -; rm -f data-${host}.tar.xz"

  if [ $? -ne 0 ] ; then
    echo "error: unpack command on host \"${host}\" failed"
    return 3
  fi

  mmachine_exec "${host}" "nohup ${workdir}/work.sh > /tmp/mmachine.out 2> /tmp/mmachine.err < /dev/null &"

  if [ $? -ne 0 ] ; then
    echo "error: work command on host \"${host}\" failed"
    return 4
  fi
}

function mmachine_parse {
  if [ ! -f "${1}" ]; then
    return 0
  fi

  cat "${1}" | grep "origins:" | cut -d':' -f2 | sed 's/},{/ /g' | sed 's/{{//g' | sed 's/}}//g'
}

function mmachine_output_cat {
  local rdir="/vol/tmp/tjakobi/mmachine"

  for arg in "${rdir}"/result_*.tar.xz; do
    local bfile=$(basename "${arg}")
    echo "writing binary content of \"${bfile}\" to stdout" 1>&2

    xz -d -c "${arg}" | tar -x --file - --to-stdout "${bfile/%.tar.xz/.bin}"
  done
}

function mmachine_visibility_status {
  local rdir="/vol/tmp/tjakobi/mmachine"

  for arg in "${rdir}"/result_*.tar.xz; do
    local log full vis

    local bfile=$(basename "${arg}")
    bfile="${bfile/#result/output}"

    log=$(xz -d -c "${arg}" | tar -x --file - --to-stdout "${bfile/%.tar.xz/.log}")

    full=$(echo "${log}" | grep "visibility for" | cut -d' ' -f6)
    vis=$(echo "${log}" | grep "vertices are visible" | cut -d' ' -f2)

    echo "${vis} / ${full}"
  done
}

function mmachine_loadbalance {
  local stime="60s"
  local statefile="/var/tmp/tjakobi/mmachine/.balance"
  local hprefix=$(hostname | grep -o "[[:alpha:]]*")
  local numcores=$(nproc)

  local numusers load nload
  local active=1

  while [ -f "${statefile}" ]; do
    numusers=$(users | wc -w)
    load=$(cat /proc/loadavg | cut -d' ' -f2)

    # normalize load
    nload=$(echo "($load * 100) / $numcores" | bc)

    case $numusers in
      1 ) active=1 ;; # noone else is currently logged in, use host to full capacity
      2 ) if [ $nload -lt 80 ]; then
            active=1
          else
            active=0
          fi ;;
      3 ) if [ $nload -lt 60 ]; then
            active=1
          else
            active=0
          fi ;;
      * ) active=0 ;; # more than two other people are logged in, stop all processes for now
    esac

    if [ $active -eq 1 ]; then
      pkill -CONT "cyclotomic_radial_${hprefix}"
    else
      pkill -STOP "cyclotomic_radial_${hprefix}"
    fi

    sleep "${stime}"
  done
}

function mmachine_work_sub {
  local radius=$1
  local origin=$2

  local patchdata="/var/tmp/tjakobi/mmachine/patch.bin"
  local vtmp="/vol/tmp/tjakobi"
  local hname=$(hostname)
  local hprefix=$(echo "${hname}" | grep -o "[[:alpha:]]*")

  # radius: double casted as uint64_t
  # origin: comma separated (integer) coordinates
  cat "${patchdata}" | nice -n19 "cyclotomic_radial_${hprefix}" 1 $radius $origin > "result_${origin}.bin" 2> "output_${origin}.log"

  if [ $? -ne 0 ]; then
    echo "error: cyclotomic_radial failed"
    return 1
  fi

  # store hostname in output log, so we can identify which machine worked on the origin
  echo "work on origin \"${origin}\" completed on host \"${hname}\"" >> "output_${origin}.log"

  tar -c --file - "result_${origin}.bin" "output_${origin}.log" | xz -z -5 -c > "result_${origin}.tar.xz"

  if [ $? -ne 0 ]; then
    echo "error: taring results failed"
    return 2
  else
    rm -f "result_${origin}.bin" "output_${origin}.log"
  fi

  # trigger mounting of NFS share
  ls -l "${vtmp}/" &> /dev/null

  cp "result_${origin}.tar.xz" "${vtmp}/mmachine/"

  if [ $? -ne 0 ]; then
    echo "error: copying results failed"
    return 3
  fi
}

function mmachine_work {
  local nphycores=$(cat /proc/cpuinfo | grep "core id" | sort | uniq | wc -l)
  local maxjobs=$(($nphycores / 2))

  parallel --no-notice -j $maxjobs work.sh $1 ::: $2
}

function mmachine_master_main {
  local numhosts numdata
  local jph
  local index=0
  local hindex=0
  local cindex=0

  # The slave scripts fetch the patch data from /vol/tmp as a first. Since /vol/tmp is a
  # NFS share, this puts load on the network. Wait some time until going over to the next
  # host, so that not all slaves transfer the patch over the network at the same time.
  local cooldown="45s"

  local radius

  declare -a hlist
  declare -a data
  declare -a cdata

  hlist=($(mmachine_hostlist))
  numhosts=${#hlist[*]}

  radius=$1

  data=($2)
  numdata=${#data[*]}

  jph=$((($numdata + $numhosts - 1) / $numhosts))

  echo "jobs per host: $jph"

  while [ $index -lt $numdata ]; do
    cdata[$cindex]=${data[$index]}
    
    ((index++))
    ((cindex++))

    if [ $cindex -ge $jph ]; then
      local host=${hlist[$hindex]}

      mmachine_bootstrap "${host}" $radius "${cdata[*]}"
      sleep "${cooldown}"

      cindex=0
      unset cdata
      ((hindex++))
    fi

  done

  # flush remaining jobs
  if [ $cindex -ne 0 ]; then
    local host=${hlist[$hindex]}

    mmachine_bootstrap "${host}" $radius "${cdata[*]}"
  fi
}

function mmachine_slave_main {
  local lbalance="/var/tmp/tjakobi/mmachine/.balance"

  if [ -z $1 ]; then
    if [ ! -f "data.bin" ]; then
      echo "error: origin data file is missing"
      return 1
    else
      source "data.bin"
    fi

    # this fetches the compressed patch data and extracts it
    mmachine_fetchdata
    if [ $? -ne 0 ]; then
      echo "error: fetching patch data failed, aborting..."
      return 2
    else
      echo "status: patch data successfully fetched"
    fi
 
    # start load balancing
    touch "${lbalance}"
    mmachine_loadbalance &

    mmachine_work $radius "${origins[*]}"
    if [ $? -ne 0 ]; then
      echo "error: work routine failed, skipping cleanup"
      return 3
    else
      rm -rf "/var/tmp/tjakobi/mmachine"
    fi

    rm -f "${lbalance}"
  else
    # call work subroutine
    mmachine_work_sub $1 $2
  fi
}
